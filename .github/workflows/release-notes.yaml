name: Get PR Release Notes

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - edited

jobs:
  extract_release_notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Make Scripts Executable
        run: |
          chmod +x ./.github/scripts/parse_pr_for_release_notes.sh
          chmod +x ./.github/scripts/set_release_update_type.sh

      - name: Extract Release Notes Content Line by Line
        id: extract_notes
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
    
          # get the full release note section i.e. default and any custom notes
          START_MARKER="## release notes" # ignoring case in the string to match
          FULL_RELEASE_NOTES=$(echo "$PR_BODY" | ./.github/scripts/parse_pr_for_release_notes.sh "$START_MARKER")
          if [ $? -ne 0 ]; then # Check script's exit status (0 for success, 1 for error/blank)
            echo "ERROR: '## Release Notes' section not found or is empty/blank. Default notes are required. (FULL_RELEASE_NOTES)"
            #echo "FULL_RELEASE_NOTES=" >> $GITHUB_OUTPUT 
            exit 1 # Fail the step
          fi
          
          #Â get the default release note section i.e. minus any custom notes
          START_MARKER="## release notes" # ignoring case in the string to match
          END_MARKER="### release notes for"
          DEFAULT_RELEASE_NOTES=$(echo "$PR_BODY" | ./.github/scripts/parse_pr_for_release_notes.sh "$START_MARKER" "$END_MARKER")
          if [ $? -ne 0 ]; then # Check script's exit status (0 for success, 1 for error/blank)
            echo "ERROR: '## Release Notes' section not found or is empty/blank. Default notes are required. (DEFAULT_RELEASE_NOTES)"
            #echo "DEFAULT_RELEASE_NOTES=" >> $GITHUB_OUTPUT 
            exit 1 # Fail the step
          fi

          # Set the full extracted content as a step output
          echo "full_release_notes_content<<EOF_FULL" >> $GITHUB_OUTPUT
          echo "$FULL_RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF_FULL" >> $GITHUB_OUTPUT
          # Also set the full extracted content as an env var
          echo "FULL_RELEASE_NOTES<<EOT_FULL" >> $GITHUB_ENV
          echo "$FULL_RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOT_FULL" >> $GITHUB_ENV

          # Set the default extracted content as a step output
          echo "default_release_notes_content<<EOF" >> $GITHUB_OUTPUT
          echo "$DEFAULT_RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          # Also set the default extracted content as an env var
          echo "DEFAULT_RELEASE_NOTES<<EOT" >> $GITHUB_ENV 
          echo "$DEFAULT_RELEASE_NOTES" >> $GITHUB_ENV     
          echo "EOT" >> $GITHUB_ENV

      #- name: Display Extracted Notes (from step output)
       # run: |
        #  echo "--- Full Release Notes from Output (Line by Line Method) ---"
         # echo "${{ steps.extract_notes.outputs.full_release_notes_content }}"
          #echo "--- Default Release Notes from Output (Line by Line Method) ---"
          #echo "${{ steps.extract_notes.outputs.default_release_notes_content }}"

      - name: Get Custom Release Notes
        run: |
          CUSTOM_APPS="sam-app2 sam-app3"
          #WONT NEED THIS LOOP IN REAL LIFE - WILL USE THE ACTUAL LOOPS IN publish.yaml
          for app_name in $CUSTOM_APPS; do
            CUSTOM_RELEASE_NOTES=""
            echo "Processing app: $app_name"
            FULL_APP_HEADING="### release notes for ${app_name}"
            if echo "${{ env.FULL_RELEASE_NOTES }}" | grep -qFi "$FULL_APP_HEADING"; then
              # get the custom release note section i.e. default and any custom notes
              START_MARKER="$FULL_APP_HEADING" # ignoring case in the string to match
              END_MARKER="### release notes for"
              CUSTOM_RELEASE_NOTES=$(echo "${{ env.FULL_RELEASE_NOTES }}" | ./.github/scripts/parse_pr_for_release_notes.sh "$START_MARKER" "$END_MARKER")
              echo "$CUSTOM_RELEASE_NOTES"
              if [ $? -ne 0 ]; then # Check script's exit status (0 for success, 1 for error/blank)
                echo "ERROR: '## Release Notes' section not found or is empty/blank. Custom notes for '$app_name' are required. (CUSTOM_RELEASE_NOTES)"
                #echo "CUSTOM_RELEASE_NOTES=" >> $GITHUB_OUTPUT 
                exit 1 # Fail the step
              fi
            else
              echo "ERROR: No custom release notes section found for '$app_name'"
              exit 1 # Fail the step
            fi
          done
          RELEASE_NOTES_TO_USE=""
          if [ -z "$CUSTOM_RELEASE_NOTES" ]; then
            RELEASE_NOTES_TO_USE="$DEFAULT_RELEASE_NOTES"
          else
            RELEASE_NOTES_TO_USE="$CUSTOM_RELEASE_NOTES"
          fi
          UPDATE_TYPE=$(echo "$RELEASE_NOTES_TO_USE" | ./.github/scripts/set_release_update_type.sh) >&2
          echo "---------------------------------------------------"
          echo "$UPDATE_TYPE"
          echo "$RELEASE_NOTES_TO_USE"
          echo "---------------------------------------------------"
          
          
