name: Merge PR with Release Notes

on:
  push:
    branches:
      - ciarangrant-pr-2

jobs:
  extract_release_notes:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Dump Full Push Event Payload
        run: |
          echo "--- Full Push Event Payload ---"
          # Use a heredoc to safely print the multi-line JSON payload
          cat <<EOF
          ${{ toJSON(github.event) }}
          EOF
          echo "-------------------------------"
        shell: bash

      - name: Print Raw Git Log
        run: git log --merges --pretty=format:"%s" -n 1  

      - name: Find merged PR
        id: find-pr
        run: |
          PR_NUMBER=$(git log --merges --pretty=format:"%s" -n 1 | grep -oP 'Merge pull request #\K\d+')
          echo "::set-output name=pr_number::${PR_NUMBER}"

      - name: Get PR Body from Push Event
        id: get_pr_body
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Default token for API access
        run: |
          # Get the full repository name (e.g., owner/repo)
          REPO_FULL_NAME="${{ github.repository }}"

          echo "Repository: $REPO_FULL_NAME"

          # Extract all PR numbers from commit messages in the push event payload.
          # Use jq to parse the JSON and capture numbers following '#'.
          # Then sort them numerically in reverse and take the first (highest).
          HIGHEST_PR_NUMBER=$(echo "${{ toJSON(github.event) }}" | jq -r '.commits[].message | capture("#(?<pr_number>[0-9]+)") | .pr_number' | sort -rn | head -n 1)

          if [ -z "$HIGHEST_PR_NUMBER" ]; then
            echo "No Pull Request number found in the commit messages of this push event."
            echo "::set-output name=pr_body::" # Set empty output if no PR number found
            exit 0 # Exit successfully as no PR was found to process
          fi

          echo "Highest PR number found in commit messages: #$HIGHEST_PR_NUMBER"

          # Now, fetch the full Pull Request details using the highest found PR number
          # This uses the GitHub CLI to make an API call to get the specific PR's details.
          PR_INFO=$(gh api \
            "/repos/$REPO_FULL_NAME/pulls/$HIGHEST_PR_NUMBER" \
            --jq '{number: .number, title: .title, body: .body}' \
            || echo "{}") # Return empty JSON object if API call fails

          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number // ""')
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title // ""')
          PR_BODY=$(echo "$PR_INFO" | jq -r '.body // ""')

          if [ -z "$PR_NUMBER" ]; then
            echo "Failed to fetch PR details for #$HIGHEST_PR_NUMBER via GitHub API."
            echo "::set-output name=pr_body::"
          else
            echo "Successfully retrieved details for PR #$PR_NUMBER: $PR_TITLE"
            echo "PR Body (raw):"
            echo "$PR_BODY"
            echo "::set-output name=pr_body::$PR_BODY"
          fi
        shell: bash

      - name: Use the extracted PR body
        run: |
          echo "The PR body is: '${{ steps.get_pr_body.outputs.pr_body }}'"
        shell: bash  

      - name: Make Scripts Executable
        run: |
          chmod +x ./.github/scripts/parse_pr_for_release_notes.sh
          chmod +x ./.github/scripts/set_release_update_type.sh

      - name: Extract Release Notes Content Line by Line
        id: extract_notes
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |    
          echo "----------------------"
          echo "$COMMITS"
          echo "----------------------"
          # get the full release note section i.e. default and any custom notes
          START_MARKER="## release notes" # ignoring case in the string to match
          #FULL_RELEASE_NOTES=$(echo "$PR_BODY" | ./.github/scripts/parse_pr_for_release_notes.sh "$START_MARKER")
          FULL_RELEASE_NOTES=$(./.github/scripts/parse_pr_for_release_notes.sh "$PR_BODY" "$START_MARKER")
          if [ $? -ne 0 ]; then # Check script's exit status (0 for success, 1 for error/blank)
            echo "ERROR: '## Release Notes' section not found or is empty/blank. Default notes are required. (FULL_RELEASE_NOTES)"
            #echo "FULL_RELEASE_NOTES=" >> $GITHUB_OUTPUT 
            exit 1 # Fail the step
          fi
          
          # Set the full extracted content as a step output
          echo "full_release_notes_content<<EOF_FULL" >> $GITHUB_OUTPUT
          echo "$FULL_RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF_FULL" >> $GITHUB_OUTPUT
          # Also set the full extracted content as an env var
          echo "FULL_RELEASE_NOTES<<EOT_FULL" >> $GITHUB_ENV
          echo "$FULL_RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOT_FULL" >> $GITHUB_ENV


          UPDATE_TYPE=$(./.github/scripts/set_release_update_type.sh "$FULL_RELEASE_NOTES") >&2
          echo "---------------------------------------------------"
          echo "$UPDATE_TYPE"
          echo "$FULL_RELEASE_NOTES"
          echo "---------------------------------------------------"
