name: Merge PR with Release Notes

on:
  push:
    branches:
      - ciarangrant-pr-2

jobs:
  extract_release_notes:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Find Merged PR and Extract Number
        id: find-pr
        run: |
          PR_NUMBER=$(git log --merges --pretty=format:"%s" -n 1 2>&1 | grep -oP 'Merge pull request #(\d+)')
          if [[ $? -ne 0 ]]; then
            echo "ERROR: Git Log or Grep Error::Command failed with exit code $?. Check merge commit message."
            exit 1
          fi
          if [[ -z "$PR_NUMBER" ]]; then
            echo "ERROR: No PR number found::Check merge commit message."
            exit 1
          else
            PR_NUMBER="${PR_NUMBER#Merge pull request #}"
            PR_NUMBER="${PR_NUMBER%% from*}"
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          fi

      - name: Get PR body using gh CLI
        id: get-body
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          PR_BODY=$(gh api /repos/${GITHUB_REPOSITORY}/pulls/${PR_NUMBER} | jq -r '.body')
          echo "++++++++++++++++++++"
          echo "$PR_BODY"
          echo "++++++++++++++++++++"
          #echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV

      - name: Use PR body
        run: |
          echo "PR Body: $PR_BODY"
          # ... use the PR body here ..

      - name: Make Scripts Executable
        run: |
          chmod +x ./.github/scripts/parse_pr_for_release_notes.sh
          chmod +x ./.github/scripts/set_release_update_type.sh

      - name: Extract Release Notes Content Line by Line
        id: extract_notes
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |    
          echo "----------------------"
          echo "$COMMITS"
          echo "----------------------"
          # get the full release note section i.e. default and any custom notes
          START_MARKER="## release notes" # ignoring case in the string to match
          #FULL_RELEASE_NOTES=$(echo "$PR_BODY" | ./.github/scripts/parse_pr_for_release_notes.sh "$START_MARKER")
          FULL_RELEASE_NOTES=$(./.github/scripts/parse_pr_for_release_notes.sh "$PR_BODY" "$START_MARKER")
          if [ $? -ne 0 ]; then # Check script's exit status (0 for success, 1 for error/blank)
            echo "ERROR: '## Release Notes' section not found or is empty/blank. Default notes are required. (FULL_RELEASE_NOTES)"
            #echo "FULL_RELEASE_NOTES=" >> $GITHUB_OUTPUT 
            exit 1 # Fail the step
          fi
          
          # Set the full extracted content as a step output
          echo "full_release_notes_content<<EOF_FULL" >> $GITHUB_OUTPUT
          echo "$FULL_RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF_FULL" >> $GITHUB_OUTPUT
          # Also set the full extracted content as an env var
          echo "FULL_RELEASE_NOTES<<EOT_FULL" >> $GITHUB_ENV
          echo "$FULL_RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOT_FULL" >> $GITHUB_ENV


          UPDATE_TYPE=$(./.github/scripts/set_release_update_type.sh "$FULL_RELEASE_NOTES") >&2
          echo "---------------------------------------------------"
          echo "$UPDATE_TYPE"
          echo "$FULL_RELEASE_NOTES"
          echo "---------------------------------------------------"
